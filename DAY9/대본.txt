네 이어서 깃허브 브랜치 플로우에 대해 발표 해보겠습니다.
깃허브 브랜치는 2011년 깃 허브에서 제안안 전략중에 하나로
깃브랜치 와 달리 2가지 종류의 브랜치를 통해 프로젝트를 관리하는 전략입니다.

깃허브 플로우에는 2가지 종류의 브랜치가 있는데요
메인 브랜치와 other브랜치로 나뉘게됩니다.
메인 브랜치는 이프로젝트의 기반으로 여기에 머지된 데이터들을 기반으로 production release 가 이루어집니다.
메인브랜치의 경우 항상 배포 가능한 stable한 상태의 코드가 존재해야함.
아더브랜치의같은 경우 정해진 형식은 없는 자유로운 형식을 가지고 있으며 개발을 진행한후 메인에 머지하는 방식으로이루어져 있다.
아더 브랜치에서 중요한 것은 정해진 형식이 없기 때문에 커밋 메시지를 자세하게 작성해 브랜치의 역할을 명확하게 명시해야합니다.
또한 필요에 따라 삭제/추가가 자유롭습니다.

깃허브 플로우의 흐름은이렇습니다.
메인을 기반으로 새로운 브랜치를 생성하고
새로운브랜치에서 작업이 완료가 되면/작업에 대한 내용을 상세하게 커밋 메시지를 작업후 풀리퀘스트를 요청하면
pr에 대한 code review, 피드백 ,검증을 진행후 문제가 없을시 메인에 머지합니다.
메인에 머지된 데이터들을 기반으로 배포를 진행합니다.

장점.파악 가능한 수준의 직관적임을 가지며, 간단하고 명료하기 때문에 소규모 프로젝트에서의 초기 설정이나 관리가 용이함.
Production 상태에서의 Main Branch가 존재하므로, 지속적으로 배포가 가능함.
Pull Request를 통한 Code Review를 통해, 빠르게 피드백을 제공할 수 있고, 이를 통해 코드의 유연성과 안정성을 보장할 수 있음.
각자 기능개발 혹은 버그 수정에 대한 Branch를 따로 생성하기 때문에, 병렬적인 업무를 수행하면서도 충돌의 위험이 적은 편임.

Github Flow의 전략적인 단점
Main Branch 이외에는 작명과 규칙이 자유롭기 때문에, 대규모 프로젝트에서 사용할 경우,
Branch가 정리되지 않고 많아지면서 혼란을 야기할 수 있음.
Pull Request를 통하여 바로 Main Branch에 Merge 하기때문에, 특수한 경우 잠재적으로 배포에 대한 위험성을 내재함.
Github Flow에서는 초기 릴리즈 형태를 가져가며 Branch를 통해 기능을 개발하고 살을 붙이는 형태로 관리를 이어감.
따라서 Version Tag나 버전에 관한 Release를 별개로 관리하지 않기 때문에,
여러 버전을 관리하거나 롤백, 상세한 배포 관리에 있어서는 제어에 어려움이 있을 수 있음.
Github Flow가 사용되는 상황 혹은 시나리오
Github Flow는 빠른 배포가 필요한 소규모 프로젝트에서 사용됨.
빠르게 새로운 배포가 필요한 프로젝트에서 주로 사용됨.
Version과 Release에 대한 관리가 따로 필요하지 않은 프로젝트에서 주로 사용됨.

Git Flow vs Github Flow
Git Flow가 유리한 상황 혹은 시나리오
규모가 큰 프로젝트
배포 주기가 잦지 않은 프로젝트
다양한 버전 관리가 필요한 어플리케이션 혹은 오픈소스 라이브러리/프레임워크 프로젝트
롤백 및 특정 버전으로의 복원이 필요한 경우가 요해지는 프로젝트
Github Flow가 유리한 상황 혹은 시나리오
비교적으로 규모가 작은 프로젝트
잦은 배포 주기를 가지는 프로젝트
다양한 버전 관리가 필요하지 않은 서비스 혹은 개인 프로젝트
Version Tag의 관리 없이, 단일 버전 관리로도 충분한 프로젝트

