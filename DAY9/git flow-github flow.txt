Git branch 전략유형 및 장단점
Git branch란?
Git에서 프로젝트의 특정 작업을 분리하고 관리하기위해 도입한 개념
branch가 존재하기에 작업을 병렬로 진행 후 합치는 것이 가능함.
Git branch 전략 유형
1.GitFlow
2.GithubFlow
각각의 특징
------------------------------------------------------------------------------------------------
GitFlow 
GitFlow는 Vincent Driessen이란 사람이 제안한 모델
주요의 여러 개 branch를 이용
GitFlow에서 사용하는 branch의 종류에는 master/develop/feature/release/hotfix 가 있으며 각각의 branch의 역할에는
1.Master branch
: 제품으로 출시될 수 있는 안정된 상태의 코드를 관리하는 branch.
배포 가능한 상태로만 유지를 함.
2. Develop branch:
다음 릴리즈를 위해 개발되는 최신 코드를 포함하는 branch/여러가지 기능이 개발되고 테스트됨.
3. Feature branch
새로운 기능을 개발하는데 사용되는 branch
기능별로 새로운 feature branch를 만들어 개발/작업 후 develop branch에 merge함.
4.Release branch
새로운 릴리즈를 준비하는데 사용되는 branch.
테스트 및 버그 수정이 이루어지며 완성될 시 master branch에 병합됨/tagging됨
Tagging이란 인터넷상의 글이나 이미지를 관련된 주제나 카테고리로 분류될 수 있도록
콘텐츠의 내용을 대표할 수 있는 키워드를 다는 일입니다. 흔히 꼬리표라고 부르기도 합니다.
5.Hotfix branch
배포된 제품에서 발견된 긴급한 버그를 수정하기 위해 만들어지는 branch
master에서 파생되고 수정 후 master와 develop에 병합됨.
-정리
일단 처음부터 끝까지 유지되는 branch는
master/develop이고 나머지 branch(3,4,5= supporting branch)는 필요에 따라 파생됨.
장점:
branch가 목적에 따라 세분화되어 관리가 용이함
Release branch에서 테스트를 통해 안정성이 검증되어 안정성이 높음
각각 개발자들이 서로의 작업에 영향을 주지 않고 동시에 개발이 가능함.
버전관리, 롤백이 용이함
hotfix브랜치를 통한 긴급한 버그수정 등의 즉각적인 조치 가능
단점.
branch가 많아 복잡하기에 초기설정이 복잡하고 소규모 팀에는 어울리지 않음.
거치는 단계가 많아 릴리즈가 느림
일부 상황에서의 유연성의 한계 
예외 상황이나 특별한 요구사항에 대한 대응이 제한적일수 있음(
Git flow 가 사용되는 상황
1. 모바일 어플리케이션: 다양한 버전이 존재/롤백 편리함.
2. 오픈소스 라이브러리/프레임워크
왜 웹 어플리케이션에는 적합하지 않을까?
-> 롤백보다는 버그수정이 잦음/항상 최신버전을 유지하기 때문! ~
따라서 다양한 버전이 존재하고 롤백이 버그 픽스 보다
잦은 모바일 어플리케이션/오픈소스 라이브러리/프레임워크에 적당

------------------------------------------------------------------------------------------------------------
GithubFlow
Githubflow에서의 branch 종류: main, feature
main branch: 항상 배포가 가능한 상태를 유지
나머지: 이름, 규칙이 자유롭게 설정 가능
하지만 자유롭기 때문에 커밋할 때 자세하게 작성해야 하며 main에 merge하기 전에 엄격한 테스트를 통해 검증 후 merge해야함.
GitHub Flow의 Flow
main에서 새로운 branch생성(branch명은 어떤 일을 할지 자세히 작성)
생성한 branch의 작업이 끝나면 main으로 PR(Pull Request: branch를 병합하기위해 제안하는 것) /무턱대고 merge하지 않는 이유는 검토 후 병합하기위해
main에는 항상 배포가능한 상태를 유지해야 하기 때문
리뷰 및 피드백
main으로 merge 할 때 CI/CD를 거쳐서 배포를 진행
(지속적 통합(CI) 및 지속적인 배포(CD): CI/CD는 코드 변경 사항을 빈번하게 통합하고, 테스트 및 배포 과정을 자동화하여 더 자주 소프트웨어를 제공하는 것을 의미)
Githubflow의 장점
간단하고 직관적인 구조(main-나머지)
지속적인 배포 가능(main에는 항상 배포가능버전이 올라가 있기 때문)
유연성과 빠른 피드백(간단한구조, pull request로 병합 전 피드백 가능)
충돌 최소화(각각의 개발자가 독립적인 branch를 생성해 만들어 충돌 위험이 작다)
단점
대규모에 적합 하지 않음 (구조가 단순해 프로젝트크기가 커지면 규칙이 없어 복잡해짐)
배포위험성(바로 main branch로 merge하기에 잠재적인 배포 위험성을 가짐)
배포관리의 어려움
GithubFlow는 하나의 main branch를 이용하여 배포를 관리하기 때문에 버전 관리가 어렵고/배포 관리가 세밀하게 제어하는 것이 어려움.
--------------------------------------------------------------------------------------------------
GithubFlow/Git flow 선택의 기준
GitFlow: 대규모 프로젝트/다양한 버전 관리가 필요한 프로젝트/배포 주기가 잦지 않은 프로젝트
GithubFlow: 소규모 프로젝트/단일 릴리즈 버전만 존재하는 프로젝트/배포주기가 잦은 프로젝트
-----------------------------------------------------------------------------------------------------------
GitHub Flow가 자주 사용되는 이유:
단순성: GitHub Flow는 간단하고 직관적인 프로세스를 제공합니다. 새로운 기능을 추가하거나 버그를 수정하는 등의 변경 사항을 branch에서 작업하고, Pull Request를 통해 검토를 받고, 테스트된 후에 메인 branch로 병합하는 등 간단한 단계로 구성되어 있음.
지속적인 피드백과 개선: 작은 단위의 변경을 지향하며, Pull Request를 통해 지속적인 피드백과 리뷰를 받을 수 있습니다. 이를 통해 빠르게 개선하고 안정성을 높일 수 있음.
빠른 배포: 작은 기능들이나 수정사항들이 빠르게 배포될 수 있습니다. 이는 사용자들이 새로운 기능을 빨리 받아볼 수 있고, 버그도 빠르게 수정될 수 있도록 함.
테스트와 안정성: 변경 사항을 테스트하고, 검증하는 것을 강조
이를 통해 안정적인 코드를 유지할 수 있으며, 배포 시 문제를 최소화할 수 있음.
커뮤니케이션 및 협업: Pull Request를 통해 개발자들 간의 소통과 협업을 촉진.
코드 리뷰를 통해 팀원들이 서로의 작업을 검토하고 토론할 수 있습니다.
GitHub Flow는 현대적인 개발 방법론과 잘 맞아 떨어지며, 작은 규모부터 대규모 프로젝트까지 다양한 환경에서 적용할 수 있는 유연성을 가지고 있음.

Pull Request를 통해 Main Branch에 직접 Merge할 때는 몇 가지 위험이 있을 수 있어요. 이 방식은 코드 변경 사항을 빠르게 반영할 수는 있지만, 배포와 관련된 몇 가지 문제가 발생할 수 있어요. 예를 들어:

버그 및 문제 발생: 테스트되지 않은 변경 사항이 메인 코드베이스에 바로 병합될 경우, 예상치 못한 버그가 발생할 수 있어요.

CI/CD 파이프라인 문제: 병합된 변경 사항이 CI/CD 파이프라인과 충돌하여 배포 파이프라인에 문제가 생길 수 있어요.

팀원들 간의 혼란: 다른 팀원들이 바로 Main Branch에 변경 사항이 반영되는 것을 예상하지 않았을 수 있어요. 이는 협업과 코드 관리에 혼란을 줄 수 있어요.

---
